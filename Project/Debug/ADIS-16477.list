
ADIS-16477.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080049b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  24000010  080049c4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000e4  080049c4  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c3d7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c85  00000000  00000000  0002c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000980  00000000  00000000  0002e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000898  00000000  00000000  0002ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003597a  00000000  00000000  0002f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c7d9  00000000  00000000  00064c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001527a4  00000000  00000000  0007140b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c3baf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002544  00000000  00000000  001c3c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004984 	.word	0x08004984

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004984 	.word	0x08004984

080002d8 <ADIS_16477_Reset>:
 */

#include "adis16477.h"
#include "spi.h"
#include "gpio.h"
  int8_t ADIS_16477_Reset(struct ADIS *dev){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  int8_t rslt;
  uint16_t len 				= 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	82fb      	strh	r3, [r7, #22]
  uint16_t data 			= 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	827b      	strh	r3, [r7, #18]
  uint16_t MSC_Byte			= 0x41;		//  01000001
 80002e8:	2341      	movs	r3, #65	; 0x41
 80002ea:	823b      	strh	r3, [r7, #16]
  uint16_t SOFTWARE_RESET	= 0x80; 	//  bit 7
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	81fb      	strh	r3, [r7, #14]

      // Start up time
      dev->delay(252);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	20fc      	movs	r0, #252	; 0xfc
 80002f6:	4798      	blx	r3
      rslt = dev->write(GLOB_CMD, &SOFTWARE_RESET, len);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	8afa      	ldrh	r2, [r7, #22]
 80002fe:	f107 010e 	add.w	r1, r7, #14
 8000302:	2068      	movs	r0, #104	; 0x68
 8000304:	4798      	blx	r3
 8000306:	4603      	mov	r3, r0
 8000308:	757b      	strb	r3, [r7, #21]
      dev->delay(193);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6a1b      	ldr	r3, [r3, #32]
 800030e:	20c1      	movs	r0, #193	; 0xc1
 8000310:	4798      	blx	r3
      rslt = dev->read(MSC_CTRL, &data, len);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	8afa      	ldrh	r2, [r7, #22]
 8000318:	f107 0112 	add.w	r1, r7, #18
 800031c:	2060      	movs	r0, #96	; 0x60
 800031e:	4798      	blx	r3
 8000320:	4603      	mov	r3, r0
 8000322:	757b      	strb	r3, [r7, #21]
      if(data == 0xC1){
 8000324:	8a7b      	ldrh	r3, [r7, #18]
 8000326:	2bc1      	cmp	r3, #193	; 0xc1
 8000328:	d10c      	bne.n	8000344 <ADIS_16477_Reset+0x6c>
      rslt = dev->write(MSC_CTRL, &MSC_Byte, len);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	8afa      	ldrh	r2, [r7, #22]
 8000330:	f107 0110 	add.w	r1, r7, #16
 8000334:	2060      	movs	r0, #96	; 0x60
 8000336:	4798      	blx	r3
 8000338:	4603      	mov	r3, r0
 800033a:	757b      	strb	r3, [r7, #21]
      dev->delay(1);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	2001      	movs	r0, #1
 8000342:	4798      	blx	r3
      }
      rslt = dev->read(MSC_CTRL, &data, len);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	8afa      	ldrh	r2, [r7, #22]
 800034a:	f107 0112 	add.w	r1, r7, #18
 800034e:	2060      	movs	r0, #96	; 0x60
 8000350:	4798      	blx	r3
 8000352:	4603      	mov	r3, r0
 8000354:	757b      	strb	r3, [r7, #21]
      if(data != MSC_Byte){ return -1;}
 8000356:	8a7a      	ldrh	r2, [r7, #18]
 8000358:	8a3b      	ldrh	r3, [r7, #16]
 800035a:	429a      	cmp	r2, r3
 800035c:	d002      	beq.n	8000364 <ADIS_16477_Reset+0x8c>
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	e001      	b.n	8000368 <ADIS_16477_Reset+0x90>
      return rslt;
 8000364:	f997 3015 	ldrsb.w	r3, [r7, #21]
  }
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <ADIS_16477_Init>:

  int8_t ADIS_16477_Init(struct ADIS *dev){
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

    int8_t rslt;
    uint16_t Chip_ID 	= 0;
 8000378:	2300      	movs	r3, #0
 800037a:	813b      	strh	r3, [r7, #8]

       rslt = fac_calib_restore(dev);
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f000 f868 	bl	8000452 <fac_calib_restore>
 8000382:	4603      	mov	r3, r0
 8000384:	72fb      	strb	r3, [r7, #11]
       rslt = ADIS_16477_Reset(dev);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f7ff ffa6 	bl	80002d8 <ADIS_16477_Reset>
 800038c:	4603      	mov	r3, r0
 800038e:	72fb      	strb	r3, [r7, #11]

      // Chip Id checks
      for (int i = 0; i < 2; i++) {
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	e00b      	b.n	80003ae <ADIS_16477_Init+0x3e>
      rslt = dev->read(PROD_ID, &Chip_ID, 1);}
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f107 0108 	add.w	r1, r7, #8
 800039e:	2201      	movs	r2, #1
 80003a0:	2072      	movs	r0, #114	; 0x72
 80003a2:	4798      	blx	r3
 80003a4:	4603      	mov	r3, r0
 80003a6:	72fb      	strb	r3, [r7, #11]
      for (int i = 0; i < 2; i++) {
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	ddf0      	ble.n	8000396 <ADIS_16477_Init+0x26>
      if(Chip_ID != ADIS_CHIP_ID){return -9;}
 80003b4:	893b      	ldrh	r3, [r7, #8]
 80003b6:	f244 025d 	movw	r2, #16477	; 0x405d
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d002      	beq.n	80003c4 <ADIS_16477_Init+0x54>
 80003be:	f06f 0308 	mvn.w	r3, #8
 80003c2:	e014      	b.n	80003ee <ADIS_16477_Init+0x7e>
      dev->delay(10);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a1b      	ldr	r3, [r3, #32]
 80003c8:	200a      	movs	r0, #10
 80003ca:	4798      	blx	r3

	  rslt = bias_correction(dev);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f000 f89c 	bl	800050a <bias_correction>
 80003d2:	4603      	mov	r3, r0
 80003d4:	72fb      	strb	r3, [r7, #11]
	  rslt = self_test_sensor(dev);
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f000 f80d 	bl	80003f6 <self_test_sensor>
 80003dc:	4603      	mov	r3, r0
 80003de:	72fb      	strb	r3, [r7, #11]
	  rslt = flash_mem_update(dev);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 f864 	bl	80004ae <flash_mem_update>
 80003e6:	4603      	mov	r3, r0
 80003e8:	72fb      	strb	r3, [r7, #11]

return rslt;
 80003ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
  }
 80003ee:	4618      	mov	r0, r3
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <self_test_sensor>:
         if(data != 0x0000){return -9;}
                 dev->delay(2);

    return rslt;
  }
  int8_t self_test_sensor(struct ADIS *dev){
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b084      	sub	sp, #16
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]

    int8_t rslt;
    uint16_t data 		= 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	81bb      	strh	r3, [r7, #12]

    uint16_t SENSOR_SELF_TEST	= 0x04; // GLOB_CMD bit 2
 8000402:	2304      	movs	r3, #4
 8000404:	817b      	strh	r3, [r7, #10]

	  rslt = dev->write(GLOB_CMD, &SENSOR_SELF_TEST, 1);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f107 010a 	add.w	r1, r7, #10
 800040e:	2201      	movs	r2, #1
 8000410:	2068      	movs	r0, #104	; 0x68
 8000412:	4798      	blx	r3
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

    		dev->delay(14);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	6a1b      	ldr	r3, [r3, #32]
 800041c:	200e      	movs	r0, #14
 800041e:	4798      	blx	r3

          rslt = dev->read(DIAG_STAT, &data, 1);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f107 010c 	add.w	r1, r7, #12
 8000428:	2201      	movs	r2, #1
 800042a:	2002      	movs	r0, #2
 800042c:	4798      	blx	r3
 800042e:	4603      	mov	r3, r0
 8000430:	73fb      	strb	r3, [r7, #15]

          if(data != 0x0000){return -9;}
 8000432:	89bb      	ldrh	r3, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <self_test_sensor+0x48>
 8000438:	f06f 0308 	mvn.w	r3, #8
 800043c:	e005      	b.n	800044a <self_test_sensor+0x54>
                     dev->delay(1);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6a1b      	ldr	r3, [r3, #32]
 8000442:	2001      	movs	r0, #1
 8000444:	4798      	blx	r3

        return rslt;
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
  }
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <fac_calib_restore>:
  int8_t fac_calib_restore(struct ADIS *dev){
 8000452:	b580      	push	{r7, lr}
 8000454:	b084      	sub	sp, #16
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]

          int8_t rslt;
          uint16_t data 		= 0;
 800045a:	2300      	movs	r3, #0
 800045c:	81bb      	strh	r3, [r7, #12]

          uint16_t FAC_CALIB_RESTORE	= 0x02; // GLOB_CMD bit 1
 800045e:	2302      	movs	r3, #2
 8000460:	817b      	strh	r3, [r7, #10]

      	 rslt = dev->write(GLOB_CMD, &FAC_CALIB_RESTORE, 1);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f107 010a 	add.w	r1, r7, #10
 800046a:	2201      	movs	r2, #1
 800046c:	2068      	movs	r0, #104	; 0x68
 800046e:	4798      	blx	r3
 8000470:	4603      	mov	r3, r0
 8000472:	73fb      	strb	r3, [r7, #15]

      		dev->delay(142);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	208e      	movs	r0, #142	; 0x8e
 800047a:	4798      	blx	r3

               rslt = dev->read(DIAG_STAT, &data, 1);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f107 010c 	add.w	r1, r7, #12
 8000484:	2201      	movs	r2, #1
 8000486:	2002      	movs	r0, #2
 8000488:	4798      	blx	r3
 800048a:	4603      	mov	r3, r0
 800048c:	73fb      	strb	r3, [r7, #15]

               if(data != 0x0000){return -9;}
 800048e:	89bb      	ldrh	r3, [r7, #12]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <fac_calib_restore+0x48>
 8000494:	f06f 0308 	mvn.w	r3, #8
 8000498:	e005      	b.n	80004a6 <fac_calib_restore+0x54>
                       dev->delay(1);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	2001      	movs	r0, #1
 80004a0:	4798      	blx	r3

          return rslt;
 80004a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
        }
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <flash_mem_update>:
  int8_t flash_mem_update(struct ADIS *dev){
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b084      	sub	sp, #16
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]

        int8_t rslt;
        uint16_t data 		= 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	81bb      	strh	r3, [r7, #12]

        uint16_t FLASH_MEMORY_UPDATE	= 0x08; // GLOB_CMD bit 3
 80004ba:	2308      	movs	r3, #8
 80004bc:	817b      	strh	r3, [r7, #10]

    	 rslt = dev->write(GLOB_CMD, &FLASH_MEMORY_UPDATE, 1);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f107 010a 	add.w	r1, r7, #10
 80004c6:	2201      	movs	r2, #1
 80004c8:	2068      	movs	r0, #104	; 0x68
 80004ca:	4798      	blx	r3
 80004cc:	4603      	mov	r3, r0
 80004ce:	73fb      	strb	r3, [r7, #15]

    		dev->delay(72);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	2048      	movs	r0, #72	; 0x48
 80004d6:	4798      	blx	r3

             rslt = dev->read(DIAG_STAT, &data, 1);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f107 010c 	add.w	r1, r7, #12
 80004e0:	2201      	movs	r2, #1
 80004e2:	2002      	movs	r0, #2
 80004e4:	4798      	blx	r3
 80004e6:	4603      	mov	r3, r0
 80004e8:	73fb      	strb	r3, [r7, #15]

             if(data != 0x0000){return -9;}
 80004ea:	89bb      	ldrh	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <flash_mem_update+0x48>
 80004f0:	f06f 0308 	mvn.w	r3, #8
 80004f4:	e005      	b.n	8000502 <flash_mem_update+0x54>
                     dev->delay(1);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6a1b      	ldr	r3, [r3, #32]
 80004fa:	2001      	movs	r0, #1
 80004fc:	4798      	blx	r3

        return rslt;
 80004fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
      }
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <bias_correction>:
  int8_t bias_correction(struct ADIS *dev){
 800050a:	b580      	push	{r7, lr}
 800050c:	b084      	sub	sp, #16
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]

      int8_t rslt;
      uint16_t data 		= 0;
 8000512:	2300      	movs	r3, #0
 8000514:	81bb      	strh	r3, [r7, #12]

      uint16_t BIAS_CORRECTION	= 0x01; // GLOB_CMD bit 0
 8000516:	2301      	movs	r3, #1
 8000518:	817b      	strh	r3, [r7, #10]

  	 rslt = dev->write(GLOB_CMD, &BIAS_CORRECTION, 1);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f107 010a 	add.w	r1, r7, #10
 8000522:	2201      	movs	r2, #1
 8000524:	2068      	movs	r0, #104	; 0x68
 8000526:	4798      	blx	r3
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]

  		dev->delay(300);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000534:	4798      	blx	r3

           rslt = dev->read(DIAG_STAT, &data, 1);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f107 010c 	add.w	r1, r7, #12
 800053e:	2201      	movs	r2, #1
 8000540:	2002      	movs	r0, #2
 8000542:	4798      	blx	r3
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]

           if(data != 0x0000){return -9;}
 8000548:	89bb      	ldrh	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <bias_correction+0x4a>
 800054e:	f06f 0308 	mvn.w	r3, #8
 8000552:	e005      	b.n	8000560 <bias_correction+0x56>
                   dev->delay(1);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6a1b      	ldr	r3, [r3, #32]
 8000558:	2001      	movs	r0, #1
 800055a:	4798      	blx	r3

      return rslt;
 800055c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <Burst_Read_16>:
  int8_t Burst_Read_16(struct ADIS *dev){
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  int8_t rslt;
  uint16_t sum = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t burstdata_16[10];
  uint16_t reg_addr = GLOB_CMD;
 8000574:	2368      	movs	r3, #104	; 0x68
 8000576:	84bb      	strh	r3, [r7, #36]	; 0x24


  rslt = dev->burst_read(reg_addr, burstdata_16, 10);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f107 010c 	add.w	r1, r7, #12
 8000580:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8000582:	220a      	movs	r2, #10
 8000584:	4798      	blx	r3
 8000586:	4603      	mov	r3, r0
 8000588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  dev->diag_stat = burstdata_16[0];
 800058c:	89ba      	ldrh	r2, [r7, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	801a      	strh	r2, [r3, #0]
 	  dev->gyro_x 	 = burstdata_16[1];
 8000592:	89fa      	ldrh	r2, [r7, #14]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	805a      	strh	r2, [r3, #2]
 	  dev->gyro_y 	 = burstdata_16[2];
 8000598:	8a3a      	ldrh	r2, [r7, #16]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	809a      	strh	r2, [r3, #4]
 	  dev->gyro_z 	 = burstdata_16[3];
 800059e:	8a7a      	ldrh	r2, [r7, #18]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	80da      	strh	r2, [r3, #6]
 	  dev->accel_x	 = burstdata_16[4];
 80005a4:	8aba      	ldrh	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	811a      	strh	r2, [r3, #8]
 	  dev->accel_y 	 = burstdata_16[5];
 80005aa:	8afa      	ldrh	r2, [r7, #22]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	815a      	strh	r2, [r3, #10]
 	  dev->accel_z 	 = burstdata_16[6];
 80005b0:	8b3a      	ldrh	r2, [r7, #24]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	819a      	strh	r2, [r3, #12]
 	  dev->temp 	 = burstdata_16[7];
 80005b6:	8b7a      	ldrh	r2, [r7, #26]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	81da      	strh	r2, [r3, #14]
 	  dev->DATA_CNTR = burstdata_16[8];
 80005bc:	8bba      	ldrh	r2, [r7, #28]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	821a      	strh	r2, [r3, #16]
 	  dev->checksum  = burstdata_16[9];
 80005c2:	8bfa      	ldrh	r2, [r7, #30]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	825a      	strh	r2, [r3, #18]

 	 sum =  checksum(dev);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f810 	bl	80005ee <checksum>
 80005ce:	4603      	mov	r3, r0
 80005d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 	  if(dev->checksum != sum){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	8a5b      	ldrh	r3, [r3, #18]
 80005d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005d8:	429a      	cmp	r2, r3
 80005da:	d002      	beq.n	80005e2 <Burst_Read_16+0x7a>
 	   return -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	e001      	b.n	80005e6 <Burst_Read_16+0x7e>
 	   }
  return rslt;
 80005e2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <checksum>:

  int16_t checksum(struct ADIS *dev) {
 80005ee:	b480      	push	{r7}
 80005f0:	b08d      	sub	sp, #52	; 0x34
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  int16_t sum = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t burstArray [9] = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	821a      	strh	r2, [r3, #16]
  uint16_t *checksum_helper = (uint16_t *)&dev->diag_stat;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	623b      	str	r3, [r7, #32]

  for(int j = 0; j < 9 ; j++){
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
 8000612:	e00d      	b.n	8000630 <checksum+0x42>
      burstArray [j] = checksum_helper[j];
 8000614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	6a3a      	ldr	r2, [r7, #32]
 800061a:	4413      	add	r3, r2
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	3330      	adds	r3, #48	; 0x30
 8000624:	443b      	add	r3, r7
 8000626:	f823 2c24 	strh.w	r2, [r3, #-36]
  for(int j = 0; j < 9 ; j++){
 800062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062c:	3301      	adds	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000632:	2b08      	cmp	r3, #8
 8000634:	ddee      	ble.n	8000614 <checksum+0x26>
  }

  for (int i = 0; i < 9; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
 800063a:	e01a      	b.n	8000672 <checksum+0x84>
  {
      sum += (burstArray[i] & 0xFF); // Lower byte
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	3330      	adds	r3, #48	; 0x30
 8000642:	443b      	add	r3, r7
 8000644:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	b29a      	uxth	r2, r3
 800064c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800064e:	4413      	add	r3, r2
 8000650:	b29b      	uxth	r3, r3
 8000652:	85fb      	strh	r3, [r7, #46]	; 0x2e
      sum += ((burstArray[i] >> 8) & 0xFF); // Upper byte
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	3330      	adds	r3, #48	; 0x30
 800065a:	443b      	add	r3, r7
 800065c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29a      	uxth	r2, r3
 8000664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000666:	4413      	add	r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  for (int i = 0; i < 9; i++)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	3301      	adds	r3, #1
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	2b08      	cmp	r3, #8
 8000676:	dde1      	ble.n	800063c <checksum+0x4e>
  }
  return sum;
 8000678:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
}
 800067c:	4618      	mov	r0, r3
 800067e:	3734      	adds	r7, #52	; 0x34
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <Scale_accel>:

double Scale_accel(int16_t sensor_val)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  double rslt = sensor_val * 0.00125;
 8000692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000696:	ee07 3a90 	vmov	s15, r3
 800069a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800069e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80006c0 <Scale_accel+0x38>
 80006a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006a6:	ed87 7b02 	vstr	d7, [r7, #8]
  return rslt;
 80006aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80006b2:	eeb0 0b47 	vmov.f64	d0, d7
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	47ae147b 	.word	0x47ae147b
 80006c4:	3f547ae1 	.word	0x3f547ae1

080006c8 <Scale_gyro>:

double Scale_gyro(int16_t sensor_val)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  double rslt = sensor_val * 0.1;
 80006d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006de:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000700 <Scale_gyro+0x38>
 80006e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006e6:	ed87 7b02 	vstr	d7, [r7, #8]
  return rslt;
 80006ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80006f2:	eeb0 0b47 	vmov.f64	d0, d7
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	9999999a 	.word	0x9999999a
 8000704:	3fb99999 	.word	0x3fb99999

08000708 <Scale_temp>:

double Scale_temp(int16_t sensor_val)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
  double rslt = (sensor_val * 0.1);
 8000712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000740 <Scale_temp+0x38>
 8000722:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000726:	ed87 7b02 	vstr	d7, [r7, #8]
  return rslt;
 800072a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800072e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000732:	eeb0 0b47 	vmov.f64	d0, d7
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	9999999a 	.word	0x9999999a
 8000744:	3fb99999 	.word	0x3fb99999

08000748 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_GPIO_Init+0xe8>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a32      	ldr	r2, [pc, #200]	; (8000830 <MX_GPIO_Init+0xe8>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_GPIO_Init+0xe8>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0xe8>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <MX_GPIO_Init+0xe8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_GPIO_Init+0xe8>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0xe8>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_GPIO_Init+0xe8>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_GPIO_Init+0xe8>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_GPIO_Init+0xe8>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_GPIO_Init+0xe8>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_GPIO_Init+0xe8>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4816      	ldr	r0, [pc, #88]	; (8000834 <MX_GPIO_Init+0xec>)
 80007dc:	f000 ffc0 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_GPIO_Init+0xf0>)
 80007e8:	f000 ffba 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 80007ec:	2308      	movs	r3, #8
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_GPIO_Init+0xec>)
 8000804:	f000 fdfc 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000808:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0xf0>)
 8000822:	f000 fded 	bl	8001400 <HAL_GPIO_Init>

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58024400 	.word	0x58024400
 8000834:	58021400 	.word	0x58021400
 8000838:	58020c00 	.word	0x58020c00

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fc37 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f8cb 	bl	80009e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800084a:	f000 f933 	bl	8000ab4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff ff7b 	bl	8000748 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000852:	f000 fa77 	bl	8000d44 <MX_SPI2_Init>
  // ADIS-16477
  struct ADIS ADIS_dev;

  /* Bus configuration : SPI */

  ADIS_dev.read = 		ADIS_read;
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <main+0x160>)
 8000858:	61bb      	str	r3, [r7, #24]
  ADIS_dev.burst_read = ADIS_burst_read;
 800085a:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <main+0x164>)
 800085c:	61fb      	str	r3, [r7, #28]
  ADIS_dev.write = 		ADIS_write;
 800085e:	4b51      	ldr	r3, [pc, #324]	; (80009a4 <main+0x168>)
 8000860:	623b      	str	r3, [r7, #32]
  ADIS_dev.delay = 		ADIS_Delay;
 8000862:	4b51      	ldr	r3, [pc, #324]	; (80009a8 <main+0x16c>)
 8000864:	627b      	str	r3, [r7, #36]	; 0x24

  // Hard reset ADIS
  // Change the values in header file according to your setup
  HAL_GPIO_WritePin(HARD_RST, HARD_RST_PIN, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4850      	ldr	r0, [pc, #320]	; (80009ac <main+0x170>)
 800086c:	f000 ff78 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fcb1 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin(HARD_RST, HARD_RST_PIN, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	2108      	movs	r1, #8
 800087a:	484c      	ldr	r0, [pc, #304]	; (80009ac <main+0x170>)
 800087c:	f000 ff70 	bl	8001760 <HAL_GPIO_WritePin>

  ADIS_16477_Init(&ADIS_dev);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fd74 	bl	8000370 <ADIS_16477_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  start_time = HAL_GetTick();
 8000888:	f000 fc9a 	bl	80011c0 <HAL_GetTick>
 800088c:	ee07 0a90 	vmov	s15, r0
 8000890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000894:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <main+0x174>)
 8000896:	edc3 7a00 	vstr	s15, [r3]

	  Burst_Read_16(&ADIS_dev);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe63 	bl	8000568 <Burst_Read_16>
	  X_GYRO = Scale_gyro (ADIS_dev.gyro_x);
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff0e 	bl	80006c8 <Scale_gyro>
 80008ac:	eeb0 7b40 	vmov.f64	d7, d0
 80008b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <main+0x178>)
 80008b6:	edc3 7a00 	vstr	s15, [r3]
	  Y_GYRO = Scale_gyro (ADIS_dev.gyro_y);
 80008ba:	893b      	ldrh	r3, [r7, #8]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff02 	bl	80006c8 <Scale_gyro>
 80008c4:	eeb0 7b40 	vmov.f64	d7, d0
 80008c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <main+0x17c>)
 80008ce:	edc3 7a00 	vstr	s15, [r3]
	  Z_GYRO = Scale_gyro (ADIS_dev.gyro_z);
 80008d2:	897b      	ldrh	r3, [r7, #10]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fef6 	bl	80006c8 <Scale_gyro>
 80008dc:	eeb0 7b40 	vmov.f64	d7, d0
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <main+0x180>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]
	  X_ACCEL = Scale_accel (ADIS_dev.accel_x);
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff feca 	bl	8000688 <Scale_accel>
 80008f4:	eeb0 7b40 	vmov.f64	d7, d0
 80008f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008fc:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <main+0x184>)
 80008fe:	edc3 7a00 	vstr	s15, [r3]
      Y_ACCEL = Scale_accel (ADIS_dev.accel_y);
 8000902:	89fb      	ldrh	r3, [r7, #14]
 8000904:	b21b      	sxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff febe 	bl	8000688 <Scale_accel>
 800090c:	eeb0 7b40 	vmov.f64	d7, d0
 8000910:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <main+0x188>)
 8000916:	edc3 7a00 	vstr	s15, [r3]
      Z_ACCEL = Scale_accel (ADIS_dev.accel_z);
 800091a:	8a3b      	ldrh	r3, [r7, #16]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff feb2 	bl	8000688 <Scale_accel>
 8000924:	eeb0 7b40 	vmov.f64	d7, d0
 8000928:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <main+0x18c>)
 800092e:	edc3 7a00 	vstr	s15, [r3]
      ADIS_TEMP = Scale_temp (ADIS_dev.temp);
 8000932:	8a7b      	ldrh	r3, [r7, #18]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fee6 	bl	8000708 <Scale_temp>
 800093c:	eeb0 7b40 	vmov.f64	d7, d0
 8000940:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <main+0x190>)
 8000946:	edc3 7a00 	vstr	s15, [r3]

	  end_time = HAL_GetTick();
 800094a:	f000 fc39 	bl	80011c0 <HAL_GetTick>
 800094e:	ee07 0a90 	vmov	s15, r0
 8000952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <main+0x194>)
 8000958:	edc3 7a00 	vstr	s15, [r3]
	  execution_time = end_time - start_time;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <main+0x194>)
 800095e:	ed93 7a00 	vldr	s14, [r3]
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <main+0x174>)
 8000964:	edd3 7a00 	vldr	s15, [r3]
 8000968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <main+0x198>)
 800096e:	edc3 7a00 	vstr	s15, [r3]
	  execution_time = execution_time / 1000;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <main+0x198>)
 8000974:	ed93 7a00 	vldr	s14, [r3]
 8000978:	eddf 6a17 	vldr	s13, [pc, #92]	; 80009d8 <main+0x19c>
 800097c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <main+0x198>)
 8000982:	edc3 7a00 	vstr	s15, [r3]
	  freq = 1 / execution_time;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <main+0x198>)
 8000988:	ed93 7a00 	vldr	s14, [r3]
 800098c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x1a0>)
 8000996:	edc3 7a00 	vstr	s15, [r3]
	  start_time = HAL_GetTick();
 800099a:	e775      	b.n	8000888 <main+0x4c>
 800099c:	08000af1 	.word	0x08000af1
 80009a0:	08000ba5 	.word	0x08000ba5
 80009a4:	08000c3d 	.word	0x08000c3d
 80009a8:	08000d25 	.word	0x08000d25
 80009ac:	58021400 	.word	0x58021400
 80009b0:	24000048 	.word	0x24000048
 80009b4:	2400002c 	.word	0x2400002c
 80009b8:	24000030 	.word	0x24000030
 80009bc:	24000034 	.word	0x24000034
 80009c0:	24000038 	.word	0x24000038
 80009c4:	2400003c 	.word	0x2400003c
 80009c8:	24000040 	.word	0x24000040
 80009cc:	24000044 	.word	0x24000044
 80009d0:	2400004c 	.word	0x2400004c
 80009d4:	24000050 	.word	0x24000050
 80009d8:	447a0000 	.word	0x447a0000
 80009dc:	24000054 	.word	0x24000054

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	224c      	movs	r2, #76	; 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 ffc0 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 ffba 	bl	8004974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 fec7 	bl	8001794 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xcc>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xcc>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fed1 	bl	8001808 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a6c:	f000 f965 	bl	8000d3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	233f      	movs	r3, #63	; 0x3f
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fb11 	bl	80020bc <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 f94b 	bl	8000d3a <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3770      	adds	r7, #112	; 0x70
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58000400 	.word	0x58000400
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0b0      	sub	sp, #192	; 0xc0
 8000ab8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	22c0      	movs	r2, #192	; 0xc0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 ff57 	bl	8004974 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000ac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aca:	f04f 0300 	mov.w	r3, #0
 8000ace:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fe1f 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000ae4:	f000 f929 	bl	8000d3a <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	37c0      	adds	r7, #192	; 0xc0
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <ADIS_read>:

/* USER CODE BEGIN 4 */
int8_t ADIS_read (uint16_t reg_addr, uint16_t *read_data, uint16_t len){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]

  uint16_t txData = ((reg_addr & 0x7F) << 8);
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <ADIS_read+0xac>)
 8000b16:	f000 fe23 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b1a:	200a      	movs	r0, #10
 8000b1c:	f000 fb5c 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	481d      	ldr	r0, [pc, #116]	; (8000b9c <ADIS_read+0xac>)
 8000b28:	f000 fe1a 	bl	8001760 <HAL_GPIO_WritePin>

  if (HAL_SPI_Transmit(ADIS_SPI, (uint8_t *)&txData, 1, 1000) != HAL_OK) {
 8000b2c:	f107 010e 	add.w	r1, r7, #14
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	2201      	movs	r2, #1
 8000b36:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <ADIS_read+0xb0>)
 8000b38:	f003 fa82 	bl	8004040 <HAL_SPI_Transmit>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <ADIS_read+0x58>
    return -9;
 8000b42:	f06f 0308 	mvn.w	r3, #8
 8000b46:	e025      	b.n	8000b94 <ADIS_read+0xa4>
  }
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <ADIS_read+0xac>)
 8000b50:	f000 fe06 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay (1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fb3f 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <ADIS_read+0xac>)
 8000b62:	f000 fdfd 	bl	8001760 <HAL_GPIO_WritePin>


  if (HAL_SPI_Receive(ADIS_SPI, (uint8_t *)read_data, len, 1000) != HAL_OK) {
 8000b66:	88ba      	ldrh	r2, [r7, #4]
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <ADIS_read+0xb0>)
 8000b70:	f003 fc62 	bl	8004438 <HAL_SPI_Receive>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <ADIS_read+0x90>
      return -9;
 8000b7a:	f06f 0308 	mvn.w	r3, #8
 8000b7e:	e009      	b.n	8000b94 <ADIS_read+0xa4>
  }

  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <ADIS_read+0xac>)
 8000b88:	f000 fdea 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay (1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fb23 	bl	80011d8 <HAL_Delay>
  return 0;
 8000b92:	2300      	movs	r3, #0
  }
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	24000058 	.word	0x24000058

08000ba4 <ADIS_burst_read>:

int8_t ADIS_burst_read	(uint16_t reg_addr, uint16_t *read_data, uint16_t len){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80bb      	strh	r3, [r7, #4]

  uint16_t txData = ((reg_addr & 0x7F) << 8);
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <ADIS_burst_read+0x90>)
 8000bca:	f000 fdc9 	bl	8001760 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fb02 	bl	80011d8 <HAL_Delay>
    HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <ADIS_burst_read+0x90>)
 8000bdc:	f000 fdc0 	bl	8001760 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(ADIS_SPI, (uint8_t *)&txData, 1, 1000) != HAL_OK) {
 8000be0:	f107 010e 	add.w	r1, r7, #14
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	2201      	movs	r2, #1
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <ADIS_burst_read+0x94>)
 8000bec:	f003 fa28 	bl	8004040 <HAL_SPI_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <ADIS_burst_read+0x58>
        return -9;
 8000bf6:	f06f 0308 	mvn.w	r3, #8
 8000bfa:	e016      	b.n	8000c2a <ADIS_burst_read+0x86>
      }
    if (HAL_SPI_Receive(ADIS_SPI, (uint8_t *) read_data, len, 1000) != HAL_OK) {
 8000bfc:	88ba      	ldrh	r2, [r7, #4]
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <ADIS_burst_read+0x94>)
 8000c06:	f003 fc17 	bl	8004438 <HAL_SPI_Receive>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <ADIS_burst_read+0x72>
          return -9;
 8000c10:	f06f 0308 	mvn.w	r3, #8
 8000c14:	e009      	b.n	8000c2a <ADIS_burst_read+0x86>
      }

      HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <ADIS_burst_read+0x90>)
 8000c1e:	f000 fd9f 	bl	8001760 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 fad8 	bl	80011d8 <HAL_Delay>
      return 0;
 8000c28:	2300      	movs	r3, #0

}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58020c00 	.word	0x58020c00
 8000c38:	24000058 	.word	0x24000058

08000c3c <ADIS_write>:

int8_t ADIS_write (uint16_t reg_addr, const uint16_t *read_data, uint16_t len){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	80bb      	strh	r3, [r7, #4]

  uint16_t txData = (((reg_addr & 0x7F) | 0x80) << 8);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <ADIS_write+0xdc>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
  uint16_t CMD = *read_data;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	81bb      	strh	r3, [r7, #12]
  uint16_t lowbyte = (txData | (CMD & 0xFF));
 8000c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	817b      	strh	r3, [r7, #10]
  uint16_t highbyte = ((txData | 0x100) | ((CMD >> 8) & 0xFF));
 8000c74:	89bb      	ldrh	r3, [r7, #12]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <ADIS_write+0xe0>)
 8000c90:	f000 fd66 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fa9f 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca0:	481e      	ldr	r0, [pc, #120]	; (8000d1c <ADIS_write+0xe0>)
 8000ca2:	f000 fd5d 	bl	8001760 <HAL_GPIO_WritePin>

   if (HAL_SPI_Transmit(ADIS_SPI, (uint8_t *) &lowbyte, 1, 1000) != HAL_OK) {
 8000ca6:	f107 010a 	add.w	r1, r7, #10
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	2201      	movs	r2, #1
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <ADIS_write+0xe4>)
 8000cb2:	f003 f9c5 	bl	8004040 <HAL_SPI_Transmit>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <ADIS_write+0x86>
     return -9;
 8000cbc:	f06f 0308 	mvn.w	r3, #8
 8000cc0:	e026      	b.n	8000d10 <ADIS_write+0xd4>
   }
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <ADIS_write+0xe0>)
 8000cca:	f000 fd49 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay (1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fa82 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <ADIS_write+0xe0>)
 8000cdc:	f000 fd40 	bl	8001760 <HAL_GPIO_WritePin>

   if (HAL_SPI_Transmit(ADIS_SPI, (uint8_t *) &highbyte, 1, 1000) != HAL_OK) {
 8000ce0:	f107 0108 	add.w	r1, r7, #8
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	2201      	movs	r2, #1
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <ADIS_write+0xe4>)
 8000cec:	f003 f9a8 	bl	8004040 <HAL_SPI_Transmit>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <ADIS_write+0xc0>
      return -9;
 8000cf6:	f06f 0308 	mvn.w	r3, #8
 8000cfa:	e009      	b.n	8000d10 <ADIS_write+0xd4>
     }
  HAL_GPIO_WritePin(ADIS_CS, ADIS_CS_PIN, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <ADIS_write+0xe0>)
 8000d04:	f000 fd2c 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_Delay (1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fa65 	bl	80011d8 <HAL_Delay>
return 0;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	ffff8000 	.word	0xffff8000
 8000d1c:	58020c00 	.word	0x58020c00
 8000d20:	24000058 	.word	0x24000058

08000d24 <ADIS_Delay>:
void ADIS_Delay(uint32_t period){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
HAL_Delay(period);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fa53 	bl	80011d8 <HAL_Delay>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3e:	b672      	cpsid	i
}
 8000d40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <Error_Handler+0x8>

08000d44 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d4a:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <MX_SPI2_Init+0xac>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d5e:	220f      	movs	r2, #15
 8000d60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d7c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_SPI2_Init+0xa8>)
 8000dda:	f003 f80d 	bl	8003df8 <HAL_SPI_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8000de4:	f7ff ffa9 	bl	8000d3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000058 	.word	0x24000058
 8000df0:	40003800 	.word	0x40003800

08000df4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ba      	sub	sp, #232	; 0xe8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22c0      	movs	r2, #192	; 0xc0
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fdad 	bl	8004974 <memset>
  if(spiHandle->Instance==SPI2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d146      	bne.n	8000eb2 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e34:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc6e 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e46:	f7ff ff78 	bl	8000d3a <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_SPI_MspInit+0xd0>)
 8000eae:	f000 faa7 	bl	8001400 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	37e8      	adds	r7, #232	; 0xe8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020400 	.word	0x58020400

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	58024400 	.word	0x58024400

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f926 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <SystemInit+0xe4>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a36      	ldr	r2, [pc, #216]	; (8001034 <SystemInit+0xe4>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <SystemInit+0xe8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d807      	bhi.n	8000f80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <SystemInit+0xe8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 030f 	bic.w	r3, r3, #15
 8000f78:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <SystemInit+0xe8>)
 8000f7a:	f043 0307 	orr.w	r3, r3, #7
 8000f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <SystemInit+0xec>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2d      	ldr	r2, [pc, #180]	; (800103c <SystemInit+0xec>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <SystemInit+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <SystemInit+0xec>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4929      	ldr	r1, [pc, #164]	; (800103c <SystemInit+0xec>)
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <SystemInit+0xf0>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <SystemInit+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <SystemInit+0xe8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 030f 	bic.w	r3, r3, #15
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <SystemInit+0xe8>)
 8000fb4:	f043 0307 	orr.w	r3, r3, #7
 8000fb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <SystemInit+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <SystemInit+0xec>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <SystemInit+0xec>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <SystemInit+0xec>)
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <SystemInit+0xf4>)
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <SystemInit+0xec>)
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <SystemInit+0xf8>)
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <SystemInit+0xec>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <SystemInit+0xfc>)
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <SystemInit+0xec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SystemInit+0xec>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <SystemInit+0xfc>)
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <SystemInit+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <SystemInit+0xec>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <SystemInit+0xfc>)
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <SystemInit+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <SystemInit+0xec>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <SystemInit+0xec>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <SystemInit+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <SystemInit+0x100>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <SystemInit+0x104>)
 8001014:	4013      	ands	r3, r2
 8001016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800101a:	d202      	bcs.n	8001022 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <SystemInit+0x108>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <SystemInit+0x10c>)
 8001024:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001028:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	52002000 	.word	0x52002000
 800103c:	58024400 	.word	0x58024400
 8001040:	eaf6ed7f 	.word	0xeaf6ed7f
 8001044:	02020200 	.word	0x02020200
 8001048:	01ff0000 	.word	0x01ff0000
 800104c:	01010280 	.word	0x01010280
 8001050:	5c001000 	.word	0x5c001000
 8001054:	ffff0000 	.word	0xffff0000
 8001058:	51008108 	.word	0x51008108
 800105c:	52004000 	.word	0x52004000

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001064:	f7ff ff74 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f003 fc4d 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fbd3 	bl	800083c <main>
  bx  lr
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800109c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010a4:	080049b4 	.word	0x080049b4
  ldr r2, =_sbss
 80010a8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010ac:	240000e4 	.word	0x240000e4

080010b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC3_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f96e 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010c0:	f001 f9b2 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	4913      	ldr	r1, [pc, #76]	; (8001120 <HAL_Init+0x6c>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_Init+0x6c>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_Init+0x70>)
 80010f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_Init+0x74>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f814 	bl	800112c <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e002      	b.n	8001114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800110e:	f7ff fedb 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024400 	.word	0x58024400
 8001120:	0800499c 	.word	0x0800499c
 8001124:	24000004 	.word	0x24000004
 8001128:	24000000 	.word	0x24000000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_InitTick+0x60>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e021      	b.n	8001184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_InitTick+0x64>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f945 	bl	80013e6 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f91d 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x68>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2400000c 	.word	0x2400000c
 8001190:	24000000 	.word	0x24000000
 8001194:	24000008 	.word	0x24000008

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	240000e0 	.word	0x240000e0

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240000e0 	.word	0x240000e0

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2400000c 	.word	0x2400000c

08001220 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetREVID+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0c1b      	lsrs	r3, r3, #16
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	5c001000 	.word	0x5c001000

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	4313      	orrs	r3, r2
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	05fa0000 	.word	0x05fa0000

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff47 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff5e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffb2 	bl	8001358 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_GPIO_Init+0x234>)
 8001410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001412:	e194      	b.n	800173e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8186 	beq.w	8001738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d005      	beq.n	8001444 <HAL_GPIO_Init+0x44>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d017      	beq.n	80014e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d123      	bne.n	8001536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	69b9      	ldr	r1, [r7, #24]
 8001532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80e0 	beq.w	8001738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x238>)
 800157a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800157e:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x238>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_GPIO_Init+0x238>)
 800158a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_GPIO_Init+0x23c>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_GPIO_Init+0x240>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d052      	beq.n	8001668 <HAL_GPIO_Init+0x268>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_GPIO_Init+0x244>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d031      	beq.n	800162e <HAL_GPIO_Init+0x22e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_GPIO_Init+0x248>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02b      	beq.n	800162a <HAL_GPIO_Init+0x22a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_GPIO_Init+0x24c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x226>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_GPIO_Init+0x250>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x222>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_GPIO_Init+0x254>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x21e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x258>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x21a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_GPIO_Init+0x25c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x216>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_GPIO_Init+0x260>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x212>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_GPIO_Init+0x264>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x20e>
 800160a:	2309      	movs	r3, #9
 800160c:	e02d      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800160e:	230a      	movs	r3, #10
 8001610:	e02b      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001612:	2308      	movs	r3, #8
 8001614:	e029      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001616:	2307      	movs	r3, #7
 8001618:	e027      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800161a:	2306      	movs	r3, #6
 800161c:	e025      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800161e:	2305      	movs	r3, #5
 8001620:	e023      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001622:	2304      	movs	r3, #4
 8001624:	e021      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001626:	2303      	movs	r3, #3
 8001628:	e01f      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800162a:	2302      	movs	r3, #2
 800162c:	e01d      	b.n	800166a <HAL_GPIO_Init+0x26a>
 800162e:	2301      	movs	r3, #1
 8001630:	e01b      	b.n	800166a <HAL_GPIO_Init+0x26a>
 8001632:	bf00      	nop
 8001634:	58000080 	.word	0x58000080
 8001638:	58024400 	.word	0x58024400
 800163c:	58000400 	.word	0x58000400
 8001640:	58020000 	.word	0x58020000
 8001644:	58020400 	.word	0x58020400
 8001648:	58020800 	.word	0x58020800
 800164c:	58020c00 	.word	0x58020c00
 8001650:	58021000 	.word	0x58021000
 8001654:	58021400 	.word	0x58021400
 8001658:	58021800 	.word	0x58021800
 800165c:	58021c00 	.word	0x58021c00
 8001660:	58022000 	.word	0x58022000
 8001664:	58022400 	.word	0x58022400
 8001668:	2300      	movs	r3, #0
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167a:	4938      	ldr	r1, [pc, #224]	; (800175c <HAL_GPIO_Init+0x35c>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f ae63 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3724      	adds	r7, #36	; 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	58000400 	.word	0x58000400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_PWREx_ConfigSupply+0x70>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00a      	beq.n	80017be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_PWREx_ConfigSupply+0x70>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e01f      	b.n	80017fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e01d      	b.n	80017fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_PWREx_ConfigSupply+0x70>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	490f      	ldr	r1, [pc, #60]	; (8001804 <HAL_PWREx_ConfigSupply+0x70>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80017ce:	f7ff fcf7 	bl	80011c0 <HAL_GetTick>
 80017d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017d4:	e009      	b.n	80017ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017d6:	f7ff fcf3 	bl	80011c0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	d901      	bls.n	80017ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e007      	b.n	80017fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_PWREx_ConfigSupply+0x70>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d1ee      	bne.n	80017d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	58024800 	.word	0x58024800

08001808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 bc48 	b.w	80020ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8088 	beq.w	800193a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182a:	4b99      	ldr	r3, [pc, #612]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001834:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	2b10      	cmp	r3, #16
 800183e:	d007      	beq.n	8001850 <HAL_RCC_OscConfig+0x48>
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	2b18      	cmp	r3, #24
 8001844:	d111      	bne.n	800186a <HAL_RCC_OscConfig+0x62>
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d06d      	beq.n	8001938 <HAL_RCC_OscConfig+0x130>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d169      	bne.n	8001938 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f000 bc21 	b.w	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x7a>
 8001874:	4b86      	ldr	r3, [pc, #536]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a85      	ldr	r2, [pc, #532]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x9c>
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a80      	ldr	r2, [pc, #512]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7d      	ldr	r2, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc0>
 80018ae:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a77      	ldr	r2, [pc, #476]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a74      	ldr	r2, [pc, #464]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd8>
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a70      	ldr	r2, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b6e      	ldr	r3, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6d      	ldr	r2, [pc, #436]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fc6a 	bl	80011c0 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fc66 	bl	80011c0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e3d4      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001902:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe8>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc56 	bl	80011c0 <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fc52 	bl	80011c0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e3c0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192a:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x110>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80ca 	beq.w	8001adc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001950:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001952:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_RCC_OscConfig+0x166>
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b18      	cmp	r3, #24
 8001962:	d156      	bne.n	8001a12 <HAL_RCC_OscConfig+0x20a>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d151      	bne.n	8001a12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x17e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e392      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0219 	bic.w	r2, r3, #25
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	493f      	ldr	r1, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fc12 	bl	80011c0 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc0e 	bl	80011c0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e37c      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	f7ff fc2f 	bl	8001220 <HAL_GetREVID>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d817      	bhi.n	80019fc <HAL_RCC_OscConfig+0x1f4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1de>
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	e07a      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	031b      	lsls	r3, r3, #12
 80019f4:	4926      	ldr	r1, [pc, #152]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fa:	e06f      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4921      	ldr	r1, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	e064      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d047      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0219 	bic.w	r2, r3, #25
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	491a      	ldr	r1, [pc, #104]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fbc8 	bl	80011c0 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fbc4 	bl	80011c0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e332      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	f7ff fbe5 	bl	8001220 <HAL_GetREVID>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d819      	bhi.n	8001a94 <HAL_RCC_OscConfig+0x28c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d108      	bne.n	8001a7a <HAL_RCC_OscConfig+0x272>
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a76:	6053      	str	r3, [r2, #4]
 8001a78:	e030      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	031b      	lsls	r3, r3, #12
 8001a88:	4901      	ldr	r1, [pc, #4]	; (8001a90 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	e025      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
 8001a90:	58024400 	.word	0x58024400
 8001a94:	4b9a      	ldr	r3, [pc, #616]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4997      	ldr	r1, [pc, #604]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b95      	ldr	r3, [pc, #596]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a94      	ldr	r2, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb83 	bl	80011c0 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff fb7f 	bl	80011c0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e2ed      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad0:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a9 	beq.w	8001c3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af4:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d007      	beq.n	8001b10 <HAL_RCC_OscConfig+0x308>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b18      	cmp	r3, #24
 8001b04:	d13a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x374>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d135      	bne.n	8001b7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b10:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x320>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e2c1      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b28:	f7ff fb7a 	bl	8001220 <HAL_GetREVID>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d817      	bhi.n	8001b66 <HAL_RCC_OscConfig+0x35e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x348>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4e:	e075      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b50:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	069b      	lsls	r3, r3, #26
 8001b5e:	4968      	ldr	r1, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b64:	e06a      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b66:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	4962      	ldr	r1, [pc, #392]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7a:	e05f      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d042      	beq.n	8001c0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b84:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5d      	ldr	r2, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb16 	bl	80011c0 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb12 	bl	80011c0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e280      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001baa:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bb6:	f7ff fb33 	bl	8001220 <HAL_GetREVID>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d817      	bhi.n	8001bf4 <HAL_RCC_OscConfig+0x3ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d108      	bne.n	8001bde <HAL_RCC_OscConfig+0x3d6>
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bda:	6053      	str	r3, [r2, #4]
 8001bdc:	e02e      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	4944      	ldr	r1, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e023      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	493f      	ldr	r1, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e018      	b.n	8001c3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff fad3 	bl	80011c0 <HAL_GetTick>
 8001c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c1e:	f7ff facf 	bl	80011c0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e23d      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d036      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d019      	beq.n	8001c84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c54:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fab0 	bl	80011c0 <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff faac 	bl	80011c0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e21a      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x45c>
 8001c82:	e018      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fa96 	bl	80011c0 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fa92 	bl	80011c0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d039      	beq.n	8001d36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fa73 	bl	80011c0 <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cde:	f7ff fa6f 	bl	80011c0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1dd      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x4d6>
 8001cfc:	e01b      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d04:	4b9b      	ldr	r3, [pc, #620]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a9a      	ldr	r2, [pc, #616]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fa56 	bl	80011c0 <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d18:	f7ff fa52 	bl	80011c0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d2a:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8081 	beq.w	8001e46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a8b      	ldr	r2, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa36 	bl	80011c0 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7ff fa32 	bl	80011c0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1a0      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6a:	4b83      	ldr	r3, [pc, #524]	; (8001f78 <HAL_RCC_OscConfig+0x770>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x584>
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a7c      	ldr	r2, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	e02d      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x5a6>
 8001d94:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a76      	ldr	r2, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c8>
 8001db6:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a6b      	ldr	r2, [pc, #428]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x5e0>
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a67      	ldr	r2, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a64      	ldr	r2, [pc, #400]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f9e6 	bl	80011c0 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f9e2 	bl	80011c0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e14e      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCC_OscConfig+0x5f0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f9d0 	bl	80011c0 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff f9cc 	bl	80011c0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e138      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 812d 	beq.w	80020aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e50:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e58:	2b18      	cmp	r3, #24
 8001e5a:	f000 80bd 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 809e 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a41      	ldr	r2, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f9a4 	bl	80011c0 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f9a0 	bl	80011c0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e10e      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_OscConfig+0x774>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	430a      	orrs	r2, r1
 8001eae:	4931      	ldr	r1, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	628b      	str	r3, [r1, #40]	; 0x28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	3b01      	subs	r3, #1
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ee4:	4923      	ldr	r1, [pc, #140]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_RCC_OscConfig+0x778>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f02:	00d2      	lsls	r2, r2, #3
 8001f04:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f023 020c 	bic.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4917      	ldr	r1, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f023 0202 	bic.w	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	4912      	ldr	r1, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f929 	bl	80011c0 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f70:	e011      	b.n	8001f96 <HAL_RCC_OscConfig+0x78e>
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58024800 	.word	0x58024800
 8001f7c:	fffffc0c 	.word	0xfffffc0c
 8001f80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f91c 	bl	80011c0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e08a      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x77c>
 8001fa2:	e082      	b.n	80020aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f906 	bl	80011c0 <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f902 	bl	80011c0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e070      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x7b0>
 8001fd6:	e068      	b.n	80020aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fde:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d031      	beq.n	8002050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d12a      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d122      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d108      	bne.n	8002050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0e1b      	lsrs	r3, r3, #24
 8002042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e02b      	b.n	80020ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800205e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d01f      	beq.n	80020aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002076:	f7ff f8a3 	bl	80011c0 <HAL_GetTick>
 800207a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800207c:	bf00      	nop
 800207e:	f7ff f89f 	bl	80011c0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	4293      	cmp	r3, r2
 8002088:	d0f9      	beq.n	800207e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_OscConfig+0x8b0>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002096:	00d2      	lsls	r2, r2, #3
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 800209a:	4313      	orrs	r3, r2
 800209c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_RCC_OscConfig+0x8ac>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	58024400 	.word	0x58024400
 80020b8:	ffff0007 	.word	0xffff0007

080020bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e19c      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b8a      	ldr	r3, [pc, #552]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b87      	ldr	r3, [pc, #540]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4985      	ldr	r1, [pc, #532]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b83      	ldr	r3, [pc, #524]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e184      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800211c:	4b78      	ldr	r3, [pc, #480]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4975      	ldr	r1, [pc, #468]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800212a:	4313      	orrs	r3, r2
 800212c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	4b70      	ldr	r3, [pc, #448]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002146:	429a      	cmp	r2, r3
 8002148:	d908      	bls.n	800215c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	496a      	ldr	r1, [pc, #424]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002158:	4313      	orrs	r3, r2
 800215a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002174:	429a      	cmp	r2, r3
 8002176:	d908      	bls.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	495e      	ldr	r1, [pc, #376]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002186:	4313      	orrs	r3, r2
 8002188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021a6:	4b56      	ldr	r3, [pc, #344]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4953      	ldr	r1, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d908      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 020f 	bic.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4947      	ldr	r1, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d055      	beq.n	800229e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4940      	ldr	r1, [pc, #256]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800220c:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d121      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0f6      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d115      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0ea      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0de      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d6      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f023 0207 	bic.w	r2, r3, #7
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4925      	ldr	r1, [pc, #148]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800226a:	4313      	orrs	r3, r2
 800226c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226e:	f7fe ffa7 	bl	80011c0 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002274:	e00a      	b.n	800228c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7fe ffa3 	bl	80011c0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0be      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	429a      	cmp	r2, r3
 800229c:	d1eb      	bne.n	8002276 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d208      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d214      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	4906      	ldr	r1, [pc, #24]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_ClockConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e086      	b.n	800240a <HAL_RCC_ClockConfig+0x34e>
 80022fc:	52002000 	.word	0x52002000
 8002300:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4939      	ldr	r1, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 800232e:	4313      	orrs	r3, r2
 8002330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800234a:	429a      	cmp	r2, r3
 800234c:	d208      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	492e      	ldr	r1, [pc, #184]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002378:	429a      	cmp	r2, r3
 800237a:	d208      	bcs.n	800238e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4922      	ldr	r1, [pc, #136]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 800238a:	4313      	orrs	r3, r2
 800238c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d208      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4917      	ldr	r1, [pc, #92]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023bc:	f000 f834 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	4912      	ldr	r1, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x35c>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <HAL_RCC_ClockConfig+0x35c>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x360>)
 80023f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x364>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_ClockConfig+0x368>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe94 	bl	800112c <HAL_InitTick>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	58024400 	.word	0x58024400
 8002418:	0800499c 	.word	0x0800499c
 800241c:	24000004 	.word	0x24000004
 8002420:	24000000 	.word	0x24000000
 8002424:	24000008 	.word	0x24000008

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242e:	4bb3      	ldr	r3, [pc, #716]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002436:	2b18      	cmp	r3, #24
 8002438:	f200 8155 	bhi.w	80026e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	080024a9 	.word	0x080024a9
 8002448:	080026e7 	.word	0x080026e7
 800244c:	080026e7 	.word	0x080026e7
 8002450:	080026e7 	.word	0x080026e7
 8002454:	080026e7 	.word	0x080026e7
 8002458:	080026e7 	.word	0x080026e7
 800245c:	080026e7 	.word	0x080026e7
 8002460:	080026e7 	.word	0x080026e7
 8002464:	080024cf 	.word	0x080024cf
 8002468:	080026e7 	.word	0x080026e7
 800246c:	080026e7 	.word	0x080026e7
 8002470:	080026e7 	.word	0x080026e7
 8002474:	080026e7 	.word	0x080026e7
 8002478:	080026e7 	.word	0x080026e7
 800247c:	080026e7 	.word	0x080026e7
 8002480:	080026e7 	.word	0x080026e7
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080026e7 	.word	0x080026e7
 800248c:	080026e7 	.word	0x080026e7
 8002490:	080026e7 	.word	0x080026e7
 8002494:	080026e7 	.word	0x080026e7
 8002498:	080026e7 	.word	0x080026e7
 800249c:	080026e7 	.word	0x080026e7
 80024a0:	080026e7 	.word	0x080026e7
 80024a4:	080024db 	.word	0x080024db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b94      	ldr	r3, [pc, #592]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024b4:	4b91      	ldr	r3, [pc, #580]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	4a90      	ldr	r2, [pc, #576]	; (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024c6:	e111      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024c8:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ca:	61bb      	str	r3, [r7, #24]
      break;
 80024cc:	e10e      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024ce:	4b8d      	ldr	r3, [pc, #564]	; (8002704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024d0:	61bb      	str	r3, [r7, #24]
      break;
 80024d2:	e10b      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024d6:	61bb      	str	r3, [r7, #24]
      break;
 80024d8:	e108      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024e4:	4b85      	ldr	r3, [pc, #532]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024f0:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024fa:	4b80      	ldr	r3, [pc, #512]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002512:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80e1 	beq.w	80026e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	f000 8083 	beq.w	800262c <HAL_RCC_GetSysClockFreq+0x204>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f200 80a1 	bhi.w	8002670 <HAL_RCC_GetSysClockFreq+0x248>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x114>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d056      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800253a:	e099      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	4a6b      	ldr	r2, [pc, #428]	; (8002700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002582:	ed97 6a02 	vldr	s12, [r7, #8]
 8002586:	eddf 5a61 	vldr	s11, [pc, #388]	; 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 800258a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025a2:	e087      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002710 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025e6:	e065      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002714 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260a:	ed97 6a02 	vldr	s12, [r7, #8]
 800260e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800261e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800262a:	e043      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002636:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800263a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800264e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002652:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800265e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800266e:	e021      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800267e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002692:	ed97 6a02 	vldr	s12, [r7, #8]
 8002696:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800270c <HAL_RCC_GetSysClockFreq+0x2e4>
 800269a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800269e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	0a5b      	lsrs	r3, r3, #9
 80026ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026be:	3301      	adds	r3, #1
 80026c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80026d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d8:	ee17 3a90 	vmov	r3, s15
 80026dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
      break;
 80026e4:	e002      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026e8:	61bb      	str	r3, [r7, #24]
      break;
 80026ea:	bf00      	nop
  }

  return sysclockfreq;
 80026ec:	69bb      	ldr	r3, [r7, #24]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	58024400 	.word	0x58024400
 8002700:	03d09000 	.word	0x03d09000
 8002704:	003d0900 	.word	0x003d0900
 8002708:	017d7840 	.word	0x017d7840
 800270c:	46000000 	.word	0x46000000
 8002710:	4c742400 	.word	0x4c742400
 8002714:	4a742400 	.word	0x4a742400
 8002718:	4bbebc20 	.word	0x4bbebc20

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b0ca      	sub	sp, #296	; 0x128
 8002722:	af00      	add	r7, sp, #0
 8002724:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002740:	2500      	movs	r5, #0
 8002742:	ea54 0305 	orrs.w	r3, r4, r5
 8002746:	d049      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002752:	d02f      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002758:	d828      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800275a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800275e:	d01a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002764:	d822      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800276a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276e:	d007      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002770:	e01c      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002772:	4bb8      	ldr	r3, [pc, #736]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	4ab7      	ldr	r2, [pc, #732]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800277e:	e01a      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002784:	3308      	adds	r3, #8
 8002786:	2102      	movs	r1, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f001 f9d1 	bl	8003b30 <RCCEx_PLL2_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002794:	e00f      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800279a:	3328      	adds	r3, #40	; 0x28
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fa78 	bl	8003c94 <RCCEx_PLL3_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027aa:	e004      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027be:	4ba5      	ldr	r3, [pc, #660]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80027c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027cc:	4aa1      	ldr	r2, [pc, #644]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ce:	430b      	orrs	r3, r1
 80027d0:	6513      	str	r3, [r2, #80]	; 0x50
 80027d2:	e003      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80027e8:	f04f 0900 	mov.w	r9, #0
 80027ec:	ea58 0309 	orrs.w	r3, r8, r9
 80027f0:	d047      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d82a      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002819 	.word	0x08002819
 8002808:	08002827 	.word	0x08002827
 800280c:	0800283d 	.word	0x0800283d
 8002810:	0800285b 	.word	0x0800285b
 8002814:	0800285b 	.word	0x0800285b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002818:	4b8e      	ldr	r3, [pc, #568]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4a8d      	ldr	r2, [pc, #564]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002824:	e01a      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800282a:	3308      	adds	r3, #8
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f97e 	bl	8003b30 <RCCEx_PLL2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800283a:	e00f      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002840:	3328      	adds	r3, #40	; 0x28
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa25 	bl	8003c94 <RCCEx_PLL3_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002850:	e004      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002858:	e000      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800285a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800285c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002864:	4b7b      	ldr	r3, [pc, #492]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	f023 0107 	bic.w	r1, r3, #7
 800286c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	4a78      	ldr	r2, [pc, #480]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002874:	430b      	orrs	r3, r1
 8002876:	6513      	str	r3, [r2, #80]	; 0x50
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800287e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800288e:	f04f 0b00 	mov.w	fp, #0
 8002892:	ea5a 030b 	orrs.w	r3, sl, fp
 8002896:	d04c      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d030      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d829      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028aa:	2bc0      	cmp	r3, #192	; 0xc0
 80028ac:	d02d      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028ae:	2bc0      	cmp	r3, #192	; 0xc0
 80028b0:	d825      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d018      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d821      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d007      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80028c2:	e01c      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028d0:	e01c      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d6:	3308      	adds	r3, #8
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f928 	bl	8003b30 <RCCEx_PLL2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028e6:	e011      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ec:	3328      	adds	r3, #40	; 0x28
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 f9cf 	bl	8003c94 <RCCEx_PLL3_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800290a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800291c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002924:	430b      	orrs	r3, r1
 8002926:	6513      	str	r3, [r2, #80]	; 0x50
 8002928:	e003      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800292e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800293e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002948:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800294c:	460b      	mov	r3, r1
 800294e:	4313      	orrs	r3, r2
 8002950:	d053      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800295a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295e:	d035      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002964:	d82e      	bhi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800296a:	d031      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800296c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002970:	d828      	bhi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d01a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d822      	bhi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002986:	d007      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002988:	e01c      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002996:	e01c      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299c:	3308      	adds	r3, #8
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f8c5 	bl	8003b30 <RCCEx_PLL2_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029ac:	e011      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b2:	3328      	adds	r3, #40	; 0x28
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f96c 	bl	8003c94 <RCCEx_PLL3_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029c2:	e006      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	e003      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a14:	460b      	mov	r3, r1
 8002a16:	4313      	orrs	r3, r2
 8002a18:	d056      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a26:	d038      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2c:	d831      	bhi.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a32:	d034      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a38:	d82b      	bhi.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a3e:	d01d      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a44:	d825      	bhi.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a50:	e01f      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a52:	bf00      	nop
 8002a54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a58:	4ba2      	ldr	r3, [pc, #648]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4aa1      	ldr	r2, [pc, #644]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f85e 	bl	8003b30 <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a7a:	e011      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a80:	3328      	adds	r3, #40	; 0x28
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f905 	bl	8003c94 <RCCEx_PLL3_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a98:	e002      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a9a:	bf00      	nop
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002aa8:	4b8e      	ldr	r3, [pc, #568]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ab8:	4a8a      	ldr	r2, [pc, #552]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aba:	430b      	orrs	r3, r1
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
 8002abe:	e003      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ade:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	d03a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	2b30      	cmp	r3, #48	; 0x30
 8002af0:	d01f      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002af2:	2b30      	cmp	r3, #48	; 0x30
 8002af4:	d819      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d00c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d815      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d111      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a76      	ldr	r2, [pc, #472]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	3308      	adds	r3, #8
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f807 	bl	8003b30 <RCCEx_PLL2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b28:	e006      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b50:	430b      	orrs	r3, r1
 8002b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002b6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	d051      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b88:	d035      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8e:	d82e      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b94:	d031      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b9a:	d828      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	d822      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	d007      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bb2:	e01c      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 ffb0 	bl	8003b30 <RCCEx_PLL2_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bd6:	e011      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bdc:	3328      	adds	r3, #40	; 0x28
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f857 	bl	8003c94 <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6513      	str	r3, [r2, #80]	; 0x50
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	d056      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d033      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c52:	d82c      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c58:	d02f      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c5e:	d826      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c64:	d02b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c6a:	d820      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c70:	d012      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c76:	d81a      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d022      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d115      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c86:	3308      	adds	r3, #8
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 ff50 	bl	8003b30 <RCCEx_PLL2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c96:	e015      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9c:	3328      	adds	r3, #40	; 0x28
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fff7 	bl	8003c94 <RCCEx_PLL3_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cb6:	bf00      	nop
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cda:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6513      	str	r3, [r2, #80]	; 0x50
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	d055      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d1c:	d033      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d22:	d82c      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d02f      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d826      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d34:	d02b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d3a:	d820      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d40:	d012      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d46:	d81a      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d022      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d50:	d115      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d56:	3308      	adds	r3, #8
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fee8 	bl	8003b30 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d66:	e015      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6c:	3328      	adds	r3, #40	; 0x28
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 ff8f 	bl	8003c94 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d84:	e006      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d9c:	4ba3      	ldr	r3, [pc, #652]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dac:	4a9f      	ldr	r2, [pc, #636]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6593      	str	r3, [r2, #88]	; 0x58
 8002db2:	e003      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	d037      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d00e      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d816      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d111      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df8:	4b8c      	ldr	r3, [pc, #560]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a8b      	ldr	r2, [pc, #556]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e04:	e00f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fe8e 	bl	8003b30 <RCCEx_PLL2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e1a:	e004      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a7b      	ldr	r2, [pc, #492]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6513      	str	r3, [r2, #80]	; 0x50
 8002e42:	e003      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d039      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d81c      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002eb9 	.word	0x08002eb9
 8002e80:	08002e8d 	.word	0x08002e8d
 8002e84:	08002e9b 	.word	0x08002e9b
 8002e88:	08002eb9 	.word	0x08002eb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8c:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a66      	ldr	r2, [pc, #408]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e98:	e00f      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fe44 	bl	8003b30 <RCCEx_PLL2_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002eae:	e004      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002eb6:	e000      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	f023 0103 	bic.w	r1, r3, #3
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002edc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002eec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ef6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f000 809f 	beq.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f02:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe f957 	bl	80011c0 <HAL_GetTick>
 8002f12:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f16:	e00b      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fe f952 	bl	80011c0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	; 0x64
 8002f26:	d903      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ed      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d179      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f50:	4053      	eors	r3, r2
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a30      	ldr	r2, [pc, #192]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f7e:	4a2b      	ldr	r2, [pc, #172]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f92:	d118      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe f914 	bl	80011c0 <HAL_GetTick>
 8002f98:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9c:	e00d      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f90f 	bl	80011c0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d903      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002fb8:	e005      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0eb      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d129      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fde:	d10e      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ff0:	091a      	lsrs	r2, r3, #4
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6113      	str	r3, [r2, #16]
 8002ffc:	e005      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003004:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003008:	6113      	str	r3, [r2, #16]
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800301c:	430b      	orrs	r3, r1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	e00e      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800302a:	e009      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800302c:	58024400 	.word	0x58024400
 8003030:	58024800 	.word	0x58024800
 8003034:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f002 0301 	and.w	r3, r2, #1
 800304c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003056:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800305a:	460b      	mov	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	f000 8089 	beq.w	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003068:	2b28      	cmp	r3, #40	; 0x28
 800306a:	d86b      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	0800314d 	.word	0x0800314d
 8003078:	08003145 	.word	0x08003145
 800307c:	08003145 	.word	0x08003145
 8003080:	08003145 	.word	0x08003145
 8003084:	08003145 	.word	0x08003145
 8003088:	08003145 	.word	0x08003145
 800308c:	08003145 	.word	0x08003145
 8003090:	08003145 	.word	0x08003145
 8003094:	08003119 	.word	0x08003119
 8003098:	08003145 	.word	0x08003145
 800309c:	08003145 	.word	0x08003145
 80030a0:	08003145 	.word	0x08003145
 80030a4:	08003145 	.word	0x08003145
 80030a8:	08003145 	.word	0x08003145
 80030ac:	08003145 	.word	0x08003145
 80030b0:	08003145 	.word	0x08003145
 80030b4:	0800312f 	.word	0x0800312f
 80030b8:	08003145 	.word	0x08003145
 80030bc:	08003145 	.word	0x08003145
 80030c0:	08003145 	.word	0x08003145
 80030c4:	08003145 	.word	0x08003145
 80030c8:	08003145 	.word	0x08003145
 80030cc:	08003145 	.word	0x08003145
 80030d0:	08003145 	.word	0x08003145
 80030d4:	0800314d 	.word	0x0800314d
 80030d8:	08003145 	.word	0x08003145
 80030dc:	08003145 	.word	0x08003145
 80030e0:	08003145 	.word	0x08003145
 80030e4:	08003145 	.word	0x08003145
 80030e8:	08003145 	.word	0x08003145
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003145 	.word	0x08003145
 80030f4:	0800314d 	.word	0x0800314d
 80030f8:	08003145 	.word	0x08003145
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003145 	.word	0x08003145
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
 8003110:	08003145 	.word	0x08003145
 8003114:	0800314d 	.word	0x0800314d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311c:	3308      	adds	r3, #8
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fd05 	bl	8003b30 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800312c:	e00f      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003132:	3328      	adds	r3, #40	; 0x28
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fdac 	bl	8003c94 <RCCEx_PLL3_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003142:	e004      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800314c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003156:	4bbf      	ldr	r3, [pc, #764]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	4abb      	ldr	r2, [pc, #748]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003166:	430b      	orrs	r3, r1
 8003168:	6553      	str	r3, [r2, #84]	; 0x54
 800316a:	e003      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f002 0302 	and.w	r3, r2, #2
 8003180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800318a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	d041      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319a:	2b05      	cmp	r3, #5
 800319c:	d824      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031f1 	.word	0x080031f1
 80031a8:	080031bd 	.word	0x080031bd
 80031ac:	080031d3 	.word	0x080031d3
 80031b0:	080031f1 	.word	0x080031f1
 80031b4:	080031f1 	.word	0x080031f1
 80031b8:	080031f1 	.word	0x080031f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c0:	3308      	adds	r3, #8
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fcb3 	bl	8003b30 <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031d0:	e00f      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d6:	3328      	adds	r3, #40	; 0x28
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fd5a 	bl	8003c94 <RCCEx_PLL3_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031e6:	e004      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80031f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031fa:	4b96      	ldr	r3, [pc, #600]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f023 0107 	bic.w	r1, r3, #7
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003208:	4a92      	ldr	r2, [pc, #584]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800320a:	430b      	orrs	r3, r1
 800320c:	6553      	str	r3, [r2, #84]	; 0x54
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f002 0304 	and.w	r3, r2, #4
 8003224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800322e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003232:	460b      	mov	r3, r1
 8003234:	4313      	orrs	r3, r2
 8003236:	d044      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003240:	2b05      	cmp	r3, #5
 8003242:	d825      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003299 	.word	0x08003299
 8003250:	08003265 	.word	0x08003265
 8003254:	0800327b 	.word	0x0800327b
 8003258:	08003299 	.word	0x08003299
 800325c:	08003299 	.word	0x08003299
 8003260:	08003299 	.word	0x08003299
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003268:	3308      	adds	r3, #8
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fc5f 	bl	8003b30 <RCCEx_PLL2_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003278:	e00f      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327e:	3328      	adds	r3, #40	; 0x28
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fd06 	bl	8003c94 <RCCEx_PLL3_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800328e:	e004      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003296:	e000      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032a2:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f023 0107 	bic.w	r1, r3, #7
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	4a68      	ldr	r2, [pc, #416]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6593      	str	r3, [r2, #88]	; 0x58
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f002 0320 	and.w	r3, r2, #32
 80032ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032dc:	460b      	mov	r3, r1
 80032de:	4313      	orrs	r3, r2
 80032e0:	d055      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ee:	d033      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80032f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f4:	d82c      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d02f      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d826      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003306:	d02b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800330c:	d820      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003312:	d012      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003318:	d81a      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d022      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800331e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003322:	d115      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003328:	3308      	adds	r3, #8
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fbff 	bl	8003b30 <RCCEx_PLL2_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003338:	e015      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fca6 	bl	8003c94 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800334e:	e00a      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003356:	e006      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003358:	bf00      	nop
 800335a:	e004      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800335c:	bf00      	nop
 800335e:	e002      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003360:	bf00      	nop
 8003362:	e000      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	4a35      	ldr	r2, [pc, #212]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003380:	430b      	orrs	r3, r1
 8003382:	6553      	str	r3, [r2, #84]	; 0x54
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800338a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800339a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	d058      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033ba:	d033      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80033bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c0:	d82c      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c6:	d02f      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	d826      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d2:	d02b      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80033d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033d8:	d820      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033de:	d012      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e4:	d81a      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d022      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d115      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f4:	3308      	adds	r3, #8
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fb99 	bl	8003b30 <RCCEx_PLL2_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003404:	e015      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fc40 	bl	8003c94 <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800341a:	e00a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003422:	e006      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003424:	bf00      	nop
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003428:	bf00      	nop
 800342a:	e002      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344a:	4a02      	ldr	r2, [pc, #8]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800344c:	430b      	orrs	r3, r1
 800344e:	6593      	str	r3, [r2, #88]	; 0x58
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003452:	bf00      	nop
 8003454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800346c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003476:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d055      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003488:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800348c:	d033      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800348e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003492:	d82c      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	d02f      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d826      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034a4:	d02b      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034aa:	d820      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d012      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80034b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b6:	d81a      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d022      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d115      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c6:	3308      	adds	r3, #8
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fb30 	bl	8003b30 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034d6:	e015      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034dc:	3328      	adds	r3, #40	; 0x28
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fbd7 	bl	8003c94 <RCCEx_PLL3_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034ec:	e00a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034f6:	bf00      	nop
 80034f8:	e004      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800350c:	4ba1      	ldr	r3, [pc, #644]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800351c:	4a9d      	ldr	r2, [pc, #628]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
 8003522:	e003      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f002 0308 	and.w	r3, r2, #8
 8003538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003542:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	d01e      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d10c      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355e:	3328      	adds	r3, #40	; 0x28
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb96 	bl	8003c94 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003574:	4b87      	ldr	r3, [pc, #540]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003584:	4a83      	ldr	r2, [pc, #524]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003586:	430b      	orrs	r3, r1
 8003588:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f002 0310 	and.w	r3, r2, #16
 8003596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800359a:	2300      	movs	r3, #0
 800359c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d01e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035bc:	3328      	adds	r3, #40	; 0x28
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fb67 	bl	8003c94 <RCCEx_PLL3_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e2:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80035f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d03e      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361a:	d81b      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d00b      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003626:	e015      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362c:	3308      	adds	r3, #8
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa7d 	bl	8003b30 <RCCEx_PLL2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800363c:	e00f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003642:	3328      	adds	r3, #40	; 0x28
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fb24 	bl	8003c94 <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003666:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003676:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003692:	67bb      	str	r3, [r7, #120]	; 0x78
 8003694:	2300      	movs	r3, #0
 8003696:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003698:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d03b      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ae:	d01f      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80036b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b4:	d818      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80036b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ba:	d003      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80036bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c0:	d007      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80036c2:	e011      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a32      	ldr	r2, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fada 	bl	8003c94 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370c:	430b      	orrs	r3, r1
 800370e:	6553      	str	r3, [r2, #84]	; 0x54
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003726:	673b      	str	r3, [r7, #112]	; 0x70
 8003728:	2300      	movs	r3, #0
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d034      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d007      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003746:	e011      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003754:	e00e      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	3308      	adds	r3, #8
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f9e6 	bl	8003b30 <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800376a:	e003      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800377e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800378c:	430b      	orrs	r3, r1
 800378e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800379c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80037ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ae:	2300      	movs	r3, #0
 80037b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d00c      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	3328      	adds	r3, #40	; 0x28
 80037c2:	2102      	movs	r1, #2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fa65 	bl	8003c94 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80037e2:	663b      	str	r3, [r7, #96]	; 0x60
 80037e4:	2300      	movs	r3, #0
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
 80037e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d038      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fe:	d018      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003804:	d811      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380a:	d014      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800380c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003810:	d80b      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381a:	d106      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381c:	4bc3      	ldr	r3, [pc, #780]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4ac2      	ldr	r2, [pc, #776]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003828:	e008      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003830:	e004      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800383a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003844:	4bb9      	ldr	r3, [pc, #740]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003854:	4ab5      	ldr	r2, [pc, #724]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003856:	430b      	orrs	r3, r1
 8003858:	6553      	str	r3, [r2, #84]	; 0x54
 800385a:	e003      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003870:	65bb      	str	r3, [r7, #88]	; 0x58
 8003872:	2300      	movs	r3, #0
 8003874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003876:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003880:	4baa      	ldr	r3, [pc, #680]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	4aa7      	ldr	r2, [pc, #668]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
 80038a2:	2300      	movs	r3, #0
 80038a4:	657b      	str	r3, [r7, #84]	; 0x54
 80038a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038b0:	4b9e      	ldr	r3, [pc, #632]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038c0:	4a9a      	ldr	r2, [pc, #616]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d4:	2300      	movs	r3, #0
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e2:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	4a8e      	ldr	r2, [pc, #568]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
 8003904:	2300      	movs	r3, #0
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003912:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4a85      	ldr	r2, [pc, #532]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800391c:	6113      	str	r3, [r2, #16]
 800391e:	4b83      	ldr	r3, [pc, #524]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003920:	6919      	ldr	r1, [r3, #16]
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800392a:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
 800393e:	2300      	movs	r3, #0
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003942:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800394c:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	4a74      	ldr	r2, [pc, #464]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395c:	430b      	orrs	r3, r1
 800395e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
 800396e:	2300      	movs	r3, #0
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
 8003972:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800397c:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398c:	4a67      	ldr	r2, [pc, #412]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800398e:	430b      	orrs	r3, r1
 8003990:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	2100      	movs	r1, #0
 800399c:	62b9      	str	r1, [r7, #40]	; 0x28
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80039a8:	460b      	mov	r3, r1
 80039aa:	4313      	orrs	r3, r2
 80039ac:	d011      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b2:	3308      	adds	r3, #8
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f8ba 	bl	8003b30 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	2100      	movs	r1, #0
 80039dc:	6239      	str	r1, [r7, #32]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d011      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	3308      	adds	r3, #8
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f89a 	bl	8003b30 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	61b9      	str	r1, [r7, #24]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	d011      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a32:	3308      	adds	r3, #8
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f87a 	bl	8003b30 <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	6139      	str	r1, [r7, #16]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d011      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a72:	3328      	adds	r3, #40	; 0x28
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f90c 	bl	8003c94 <RCCEx_PLL3_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	d011      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f8ec 	bl	8003c94 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	2100      	movs	r1, #0
 8003adc:	6039      	str	r1, [r7, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	d011      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	3328      	adds	r3, #40	; 0x28
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f8cc 	bl	8003c94 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003b12:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003b26:	46bd      	mov	sp, r7
 8003b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2c:	58024400 	.word	0x58024400

08003b30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d101      	bne.n	8003b4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e099      	b.n	8003c82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fb31 	bl	80011c0 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b62:	f7fd fb2d 	bl	80011c0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e086      	b.n	8003c82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b74:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	493f      	ldr	r1, [pc, #252]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	628b      	str	r3, [r1, #40]	; 0x28
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	025b      	lsls	r3, r3, #9
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bc4:	4931      	ldr	r1, [pc, #196]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	492d      	ldr	r1, [pc, #180]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f023 0220 	bic.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	4928      	ldr	r1, [pc, #160]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bf4:	f023 0310 	bic.w	r3, r3, #16
 8003bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <RCCEx_PLL2_Config+0x160>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	69d2      	ldr	r2, [r2, #28]
 8003c06:	00d2      	lsls	r2, r2, #3
 8003c08:	4920      	ldr	r1, [pc, #128]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c14:	f043 0310 	orr.w	r3, r3, #16
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c2c:	e00f      	b.n	8003c4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c34:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c40:	e005      	b.n	8003c4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5a:	f7fd fab1 	bl	80011c0 <HAL_GetTick>
 8003c5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c62:	f7fd faad 	bl	80011c0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e006      	b.n	8003c82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <RCCEx_PLL2_Config+0x15c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	ffff0007 	.word	0xffff0007

08003c94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca2:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d101      	bne.n	8003cb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e099      	b.n	8003de6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fa7f 	bl	80011c0 <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003cc6:	f7fd fa7b 	bl	80011c0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e086      	b.n	8003de6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	051b      	lsls	r3, r3, #20
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d28:	4931      	ldr	r1, [pc, #196]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	492d      	ldr	r1, [pc, #180]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d40:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4928      	ldr	r1, [pc, #160]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <RCCEx_PLL3_Config+0x160>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	69d2      	ldr	r2, [r2, #28]
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	4920      	ldr	r1, [pc, #128]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d90:	e00f      	b.n	8003db2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003d9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da4:	e005      	b.n	8003db2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fd f9ff 	bl	80011c0 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dc6:	f7fd f9fb 	bl	80011c0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <RCCEx_PLL3_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	ffff0007 	.word	0xffff0007

08003df8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e10f      	b.n	800402a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a87      	ldr	r2, [pc, #540]	; (8004034 <HAL_SPI_Init+0x23c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <HAL_SPI_Init+0x42>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a86      	ldr	r2, [pc, #536]	; (8004038 <HAL_SPI_Init+0x240>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00a      	beq.n	8003e3a <HAL_SPI_Init+0x42>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a84      	ldr	r2, [pc, #528]	; (800403c <HAL_SPI_Init+0x244>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d005      	beq.n	8003e3a <HAL_SPI_Init+0x42>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d901      	bls.n	8003e3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0f7      	b.n	800402a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fd5a 	bl	80048f4 <SPI_GetPacketSize>
 8003e40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7b      	ldr	r2, [pc, #492]	; (8004034 <HAL_SPI_Init+0x23c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00c      	beq.n	8003e66 <HAL_SPI_Init+0x6e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a79      	ldr	r2, [pc, #484]	; (8004038 <HAL_SPI_Init+0x240>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_SPI_Init+0x6e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <HAL_SPI_Init+0x244>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_Init+0x6e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d811      	bhi.n	8003e8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e6a:	4a72      	ldr	r2, [pc, #456]	; (8004034 <HAL_SPI_Init+0x23c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a70      	ldr	r2, [pc, #448]	; (8004038 <HAL_SPI_Init+0x240>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_SPI_Init+0x8c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6f      	ldr	r2, [pc, #444]	; (800403c <HAL_SPI_Init+0x244>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d104      	bne.n	8003e8e <HAL_SPI_Init+0x96>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d901      	bls.n	8003e8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0cd      	b.n	800402a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc ffa6 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003eca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed4:	d119      	bne.n	8003f0a <HAL_SPI_Init+0x112>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d103      	bne.n	8003ee8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10c      	bne.n	8003f0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef8:	d107      	bne.n	8003f0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00f      	beq.n	8003f36 <HAL_SPI_Init+0x13e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d90b      	bls.n	8003f36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	ea42 0103 	orr.w	r1, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40013000 	.word	0x40013000
 8004038:	40003800 	.word	0x40003800
 800403c:	40003c00 	.word	0x40003c00

08004040 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3320      	adds	r3, #32
 8004056:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_SPI_Transmit+0x2a>
 8004066:	2302      	movs	r3, #2
 8004068:	e1e1      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004072:	f7fd f8a5 	bl	80011c0 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d007      	beq.n	8004094 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004090:	7efb      	ldrb	r3, [r7, #27]
 8004092:	e1cc      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Transmit+0x60>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80040ac:	7efb      	ldrb	r3, [r7, #27]
 80040ae:	e1be      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2203      	movs	r2, #3
 80040b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004100:	d108      	bne.n	8004114 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e009      	b.n	8004128 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004126:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	4b96      	ldr	r3, [pc, #600]	; (8004388 <HAL_SPI_Transmit+0x348>)
 8004130:	4013      	ands	r3, r2
 8004132:	88f9      	ldrh	r1, [r7, #6]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	430b      	orrs	r3, r1
 800413a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004154:	d107      	bne.n	8004166 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	d947      	bls.n	80041fe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800416e:	e03f      	b.n	80041f0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d114      	bne.n	80041a8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80041a6:	e023      	b.n	80041f0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a8:	f7fd f80a 	bl	80011c0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d803      	bhi.n	80041c0 <HAL_SPI_Transmit+0x180>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d102      	bne.n	80041c6 <HAL_SPI_Transmit+0x186>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d114      	bne.n	80041f0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fac6 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e11e      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1b9      	bne.n	8004170 <HAL_SPI_Transmit+0x130>
 80041fc:	e0f1      	b.n	80043e2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b07      	cmp	r3, #7
 8004204:	f240 80e6 	bls.w	80043d4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004208:	e05d      	b.n	80042c6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d132      	bne.n	800427e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d918      	bls.n	8004256 <HAL_SPI_Transmit+0x216>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	1d1a      	adds	r2, r3, #4
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b02      	subs	r3, #2
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004254:	e037      	b.n	80042c6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800427c:	e023      	b.n	80042c6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427e:	f7fc ff9f 	bl	80011c0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d803      	bhi.n	8004296 <HAL_SPI_Transmit+0x256>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d102      	bne.n	800429c <HAL_SPI_Transmit+0x25c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d114      	bne.n	80042c6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fa5b 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0b3      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d19b      	bne.n	800420a <HAL_SPI_Transmit+0x1ca>
 80042d2:	e086      	b.n	80043e2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d154      	bne.n	800438c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d918      	bls.n	8004320 <HAL_SPI_Transmit+0x2e0>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d914      	bls.n	8004320 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b04      	subs	r3, #4
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800431e:	e059      	b.n	80043d4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d917      	bls.n	800435c <HAL_SPI_Transmit+0x31c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	881a      	ldrh	r2, [r3, #0]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	1c9a      	adds	r2, r3, #2
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b02      	subs	r3, #2
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800435a:	e03b      	b.n	80043d4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3320      	adds	r3, #32
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004386:	e025      	b.n	80043d4 <HAL_SPI_Transmit+0x394>
 8004388:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438c:	f7fc ff18 	bl	80011c0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d803      	bhi.n	80043a4 <HAL_SPI_Transmit+0x364>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d102      	bne.n	80043aa <HAL_SPI_Transmit+0x36a>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d114      	bne.n	80043d4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f9d4 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e02c      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af79 	bne.w	80042d4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2108      	movs	r1, #8
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fa53 	bl	8004898 <SPI_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f9a5 	bl	8004758 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800442c:	7efb      	ldrb	r3, [r7, #27]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop

08004438 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3330      	adds	r3, #48	; 0x30
 8004452:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Receive+0x2a>
 800445e:	2302      	movs	r3, #2
 8004460:	e173      	b.n	800474a <HAL_SPI_Receive+0x312>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446a:	f7fc fea9 	bl	80011c0 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d007      	beq.n	800448c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004488:	7ffb      	ldrb	r3, [r7, #31]
 800448a:	e15e      	b.n	800474a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Receive+0x60>
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d107      	bne.n	80044a8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80044a4:	7ffb      	ldrb	r3, [r7, #31]
 80044a6:	e150      	b.n	800474a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2204      	movs	r2, #4
 80044ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80044f8:	d108      	bne.n	800450c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e009      	b.n	8004520 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800451e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b8b      	ldr	r3, [pc, #556]	; (8004754 <HAL_SPI_Receive+0x31c>)
 8004528:	4013      	ands	r3, r2
 800452a:	88f9      	ldrh	r1, [r7, #6]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454c:	d107      	bne.n	800455e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d948      	bls.n	80045f8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004566:	e040      	b.n	80045ea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	f248 0308 	movw	r3, #32776	; 0x8008
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004580:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004582:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80045a0:	e023      	b.n	80045ea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fc fe0d 	bl	80011c0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Receive+0x182>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Receive+0x188>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d114      	bne.n	80045ea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f8c9 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0af      	b.n	800474a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1b8      	bne.n	8004568 <HAL_SPI_Receive+0x130>
 80045f6:	e095      	b.n	8004724 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	f240 808b 	bls.w	8004718 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004602:	e03f      	b.n	8004684 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d114      	bne.n	800463c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	b292      	uxth	r2, r2
 800461c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800463a:	e023      	b.n	8004684 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463c:	f7fc fdc0 	bl	80011c0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d803      	bhi.n	8004654 <HAL_SPI_Receive+0x21c>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d102      	bne.n	800465a <HAL_SPI_Receive+0x222>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d114      	bne.n	8004684 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f87c 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e062      	b.n	800474a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1b9      	bne.n	8004604 <HAL_SPI_Receive+0x1cc>
 8004690:	e048      	b.n	8004724 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d117      	bne.n	80046d0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80046ce:	e023      	b.n	8004718 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d0:	f7fc fd76 	bl	80011c0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d803      	bhi.n	80046e8 <HAL_SPI_Receive+0x2b0>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Receive+0x2b6>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d114      	bne.n	8004718 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f832 	bl	8004758 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e018      	b.n	800474a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1b6      	bne.n	8004692 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f817 	bl	8004758 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8004748:	7ffb      	ldrb	r3, [r7, #31]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	ffff0000 	.word	0xffff0000

08004758 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0210 	orr.w	r2, r2, #16
 8004786:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6919      	ldr	r1, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b3c      	ldr	r3, [pc, #240]	; (8004894 <SPI_CloseTransfer+0x13c>)
 80047a4:	400b      	ands	r3, r1
 80047a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80047b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d014      	beq.n	80047ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00f      	beq.n	80047ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d014      	beq.n	8004824 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004822:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00f      	beq.n	800484e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	f043 0208 	orr.w	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004876:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	fffffc90 	.word	0xfffffc90

08004898 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80048a8:	e010      	b.n	80048cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048aa:	f7fc fc89 	bl	80011c0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d803      	bhi.n	80048c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d102      	bne.n	80048c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d0df      	beq.n	80048aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3307      	adds	r3, #7
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f820 	bl	8004984 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	080049ac 	.word	0x080049ac
 8004968:	080049ac 	.word	0x080049ac
 800496c:	080049ac 	.word	0x080049ac
 8004970:	080049b0 	.word	0x080049b0

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
